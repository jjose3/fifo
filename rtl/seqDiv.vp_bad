// seqDiv.vp
//; use Math::Complex;
//; use strict ;                   # Use a strict interpretation
//; use warnings FATAL=>qw(all);   # Turn warnings into errors
//; use diagnostics ;              # Print helpful info, for errors
//; my $bW = parameter( name=>"bitWidth", val=>16, doc=>"Width of input");
//; my $cbW = logn($self->get_param("bitWidth"), 2);
//; my $min = parameter(Name=>"Min", Val=>0, doc=>"inclusive minimum");
//; my $max = parameter(Name=>"Max", Val=>$bW, doc=>"excluded max");
module `mname` (
input logic [`$bW-1`:0] num,
input logic [`$bW-1`:0] den,
input logic nd_valid,
output logic nd_ready,
input logic clk,
input logic rst,
output logic qr_valid,
output logic [`$bW-1`:0] quo,
output logic [`$bW-1`:0] rem
);

localparam IDLE = 2'b00;
localparam CAPTURE = 2'b01;
localparam BUSY = 2'b10;
localparam DONE = 2'b11;

logic [`(2*$bW)-1`:0] num_tmpnxt;
logic [`(2*$bW)-1`:0] num_tmp;
logic [`(2*$bW)-1`:0] num_shft;
logic [`(2*$bW)-1`:0] den_tmpnxt;
logic [`(2*$bW)-1`:0] den_tmp;
logic [`(2*$bW)-1`:0] den_orgnxt;
logic [`(2*$bW)-1`:0] den_org;
logic [`(2*$bW)-1`:0] den_shft;
logic [`(2*$bW)-1`:0] numden_diff;
logic [`$bW-1`:0] quo_shft;
logic [`$bW-1`:0] quo_tmp;
logic [`$bW-1`:0] quo_tmpnxt;
logic seqEn;
logic stop;
logic stop_nxt;
logic [`$cbW-1`:0] counter;
logic [`$cbW-1`:0] counter_nxt;
logic [1:0] state;
logic [1:0] next_state;

always_comb begin
	case(state)
		IDLE: 		begin
					next_state = CAPTURE;
		      		end
		CAPTURE: 	begin
			 		if(nd_valid && nd_ready) begin
						next_state = BUSY;
					end
					else begin
						next_state = CAPTURE;
					end
			 	end
		BUSY: 		begin
					if(counter == 0) begin
						next_state = DONE;	
					end else begin
						next_state = BUSY;
					end
		      		end
		DONE: 		begin
					next_state = IDLE;
		      		end
	endcase
end

assign nd_ready = (state == CAPTURE) ? 1'b1 : 1'b0;
assign qr_valid = (state == DONE) ? 1'b1 : 1'b0;
assign seqEn = (state == BUSY || state == DONE) ? 1'b1 : 1'b0;

always @(posedge clk) begin
	if (nd_valid && nd_ready) begin
		num_tmp[`(2*$bW)-1`:0] = {`$bW`'b0,num[`$bW-1`:0]};
		den_tmp[`(2*$bW)-1`:0] = {1'b0,den[`$bW-1`:0],`$bW-1`'b0} ;		
	end else begin
		num_tmp[`(2*$bW)-1`:0] = num_shft[`(2*$bW)-1`:0];
		den_tmp[`(2*$bW)-1`:0] = den_shft[`(2*$bW)-1`:0];
	end
end
assign quo = {`$bW`{qr_valid}} & quo_shft;
assign rem = {`$bW`{qr_valid}} & num_shft;

//; for( my $i = 0 ; $i < 2 ; $i++ ){
//;  my $dff = generate_base( "dff" , "D_FLIP_FLOP".$i);
`$dff->instantiate()`(.d(next_state[`$i`]), .q(state[`$i`]), .clk(clk), .rst(rst));
//; }
//; for( my $i = 0 ; $i < $cbW ; $i++ ){
//;  my $dff = generate_base( "dff" , "D_FLIP_FLOP_COUNTER".$i);
`$dff->instantiate()` ( .d(counter_nxt[`$i`]), .q(counter[`$i`]), .clk(clk), .rst(rst));
//; }
//; for( my $i = 0 ; $i < $bW ; $i++ ){
//;  my $dff = generate_base( "dff" , "D_FLIP_FLOP_QUOTMP".$i);
`$dff->instantiate()` ( .d(quo_tmpnxt[`$i`]), .q(quo_tmp[`$i`]), .clk(clk), .rst(rst));
//; }

always_comb begin
	if(seqEn) begin
		if(counter > 0) begin
			numden_diff = num_tmp - den_tmp;
			num_shft = num_tmp;
			quo_shft = quo_tmp << 1; 
			if(numden_diff[`(2*$bW)-1`] == 1'b0) begin
				num_shft = numden_diff;
				quo_tmpnxt = {quo_shft[`$bW-1`:1],1'b1};
			end else begin
				num_shft = num_shft;
				quo_tmpnxt = quo_shft;
			end
			den_shft = den_tmp >> 1;
			counter_nxt = counter - 1;
		end
		else begin
			counter_nxt = counter;
			//quo_tmpnxt = quo_tmp << 1;
		end
	end
	else begin
		num_shft = `(2*$bW)-1`'b0;
		den_shft = `(2*$bW)-1`'b0;
		quo_tmpnxt = `$bW`'b0;
		counter_nxt = `$bW-1`;
	end
end

endmodule: `mname`

